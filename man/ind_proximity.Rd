% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ind_proximity.R
\name{ind_proximity}
\alias{ind_proximity}
\title{Compute proximity metrics for SCH harbours}
\usage{
ind_proximity(
  data_CIVI_Sites = data_CIVI_Sites,
  ors_api_key = NULL,
  full_results = FALSE
)
}
\arguments{
\item{data_CIVI_Sites}{A data frame likely from \code{\link[=data_CIVI_Sites]{data_CIVI_Sites()}}}

\item{ors_api_key}{your ors_api_key password to obtain driving distance
using the openrouteservice package}

\item{full_results}{a Boolean indicating if you want a more fulsome result
including the following: "HarbourName","Sailing_Nearest_Neighbour", "Sailing_Time", "Sailing_Distance",
"Driving_Nearest_Neighbour", "Driving_Distance","Driving_Time","Sailing_Plot",
"Driving_Plot","Driving_time", "Result"}
}
\value{
A list of data frames (one per harbour) containing:
\describe{
\item{Neighbour}{Name of neighbouring harbour}
\item{Distance_Sailing_Km}{Estimated sailing distance in km}
\item{plot}{A ggplot object visualizing the route}
}
}
\description{
This function first calculates proximity between Small Craft Harbours (SCH) sites
based on sailing distances (least-cost paths avoiding land) while assuming ~
a speed of 10 knots. It identifies
neighbouring harbours within 20 km straight-line distance, then estimates
sailing routes while avoiding land using raster least-cost path analysis.
The function then calculates the driving distances
using the openrouteservices package. If a waypoint falls on land during the
sailing computation or a driving distance is not available, it defaults back
to a straight-line distance and way cross land. For driving distance if
the straight line computation is used a driving distance of 70 km/h is assumed.
The final output takes the larger of the sailing and driving distances.
}
\details{
Distances are computed in two stages:
\enumerate{
\item A straight-line (Haversine) filter to keep neighbours within 20 km.
\item A least-cost path calculation over a raster with land masked as
impassable. If routing fails (e.g., waypoints fall on land), the
function falls back to Haversine distance.
}
}
\examples{
\dontrun{
## CIVI Results
sites <- data_CIVI_Sites()
out <- ind_proximity(sites, ors_api_key="your_ors_api_key")

## FULL Results
out <- ind_proximity(sites, ors_api_key="your_ors_api_key", full_results=TRUE)
}
}
